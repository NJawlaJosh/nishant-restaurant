# What is a model?

# A model is nothing more than a representation of your database, where you can store, fetch, and manipulate your data from it Think of it as the middleman of your app and database. And it usually represents a single table/collection

# what is a schema?

# A schema is a blueprint of your data. It defines the fields that your data will have, and the types of data that each field will have. It is a way to define the structure of your data, and it is usually used to validate the data that is being sent to your database.


# flow of data from request to response in a flask app ?

# 1. The request is made to the server
# 2. The request is processed by the server
# what happens to the request when it is processed by the server in a flask application?
# 3. The request is sent to the view function
# 4. The view function processes the request
# view functions are functions which are used to process the request and send the response to the client. view functions are also called route handlers or request handlers.
# 5. The view function returns a response
# 7. The response is sent to the client side
# 8. The response is processed by the client side


# how does model convert to table?

# The model is a representation of the table in the database. The model is a class that inherits from db.Model. The model has attributes that represent the columns of the table. The model has methods that represent the rows of the table.


# What is a migration?

# A migration is a way to alter your database schema over time in a consistent and easy way. Itâ€™s like version control for your database, allowing your team to easily modify and revert the database schema. Migrations are written in Python.

# What is a migration file?

# A migration file is a file that contains the instructions to upgrade or downgrade the database schema. It is generated by the Alembic library. Alemic is a library that helps to manage the database migrations. It is a part of Flask-Migrate. Flask-Migrate is a library that helps to manage the database migrations for Flask applications.

# how does flask run the app?

# what usually happens when a flask application is run?

# 1. The application is imported
# 2. The application is initialized
# 3. The application is run

# what is the difference between a model and a schema?

# A model is a representation of the table in the database. A schema is a blueprint of your data. It defines the fields that your data will have, and the types of data that each field will have. It is a way to define the structure of your data, and it is usually used to validate the data that is being sent to your database.

# what is serialization?

# Serialization is the process of converting an object into a stream of bytes to store the object or transmit it to memory, a database, or a file. Its main purpose is to save the state of an object in order to be able to recreate it when needed. The reverse process is called deserialization.

# what is deserialization?

# Deserialization is the reverse process of serialization. It is the process of converting a stream of bytes into an object. It is used to recreate an object from a file, a database, or a memory buffer.


# what is .flaskenv file?

# The .flaskenv file is a file that contains the environment variables that are used by the Flask application. It is a file that is used by the python-dotenv library. The python-dotenv library is a library that loads the environment variables from the .flaskenv file. The .flaskenv file is usually located in the root directory of the Flask application.

# what is __init__.py file?

#

# what is __init__?

# The __init__ method is a special method that is called when an object is created from a class. It is used to initialize the attributes of the object. It is also called the constructor of the class.

# what is __repr__?

# The __repr__ method is a special method that is used to represent the object as a string. It is used for debugging and logging. It is also called the representation method of the class.

# what is __str__?

# The __str__ method is a special method that is used to represent the object as a string. It is used for displaying the object. It is also called the string method of the class.

# what is __main__?

# The __main__ method is a special method that is used to run the code when the file is executed as a script. It is also called the main method of the class.

# what is __name__?

# The __name__ variable is a special variable that is used to get the name of the current module. It is also called the name variable of the class.

# what is __call__?

# The __call__ method is a special method that is used to make an object callable like a function. It is also called the call method of the class.


# what is a decorator?

# A decorator is a function that takes another function as an argument and extends the behavior of the latter function without explicitly modifying it. It is also called a wrapper. It is usually used to add functionality to an existing function without modifying it. syntax: @decorator_name

# what is a closure?

# A closure is an inner function that remembers and has access to variables in the local scope in which it was created, even after the outer function has finished executing. It is a function object that remembers values in enclosing scopes even if they are not present in memory. It is a function that is defined inside another function and has access to the variables of the outer function even after the outer function has finished executing.

# what is a decorator factory?

# A decorator factory is a function that returns a decorator. It is a function that returns a decorator. It is used to create decorators. It is also called a decorator generator.

# what is a decorator with arguments?

# A decorator with arguments is a decorator that takes arguments. It is a decorator that takes arguments. It is also called a decorator with parameters.

# what is a decorator with arguments factory?

# A decorator with arguments factory is a decorator factory that takes arguments. It is a decorator factory that takes arguments. It is also called a decorator with arguments generator.

# what is flask shell?

# The flask shell command is a command that is used to open a shell in the context of the Flask application. It is a command that is used to open a shell in the context of the Flask application. It is also called the flask shell command.

# what is flask shell context processor?

# The flask shell context processor is a function that is used to add variables to the shell session. It is a function that is used to add variables to the shell session. It is also called the flask shell context processor.

# what is flask run?

# The flask run command is a command that is used to run the Flask application. It is a command that is used to run the Flask application. It is also called the flask run command.

# how does flask run work?

# what is the difference between flask run and python app.py?

# The flask run command is a command that is used to run the Flask application. The python app.py command is a command that is used to run the Python application.

# what is flask run host?

# The flask run host is an option that is used to specify the host that the Flask application will run on. It is an option that is used to specify the host that the Flask application will run on. It is also called the flask run host option.

# what is flask run port?

# The flask run port is an option that is used to specify the port that the Flask application will run on. It is an option that is used to specify the port that the Flask application will run on. It is also called the flask run port option.\

# what is difference between flask run host and flask run port?

# The flask run host is an option that is used to specify the host that the Flask application will run on. The flask run port is an option that is used to specify the port that the Flask application will run on.

# what is host?

# The host is a computer that is connected to a network. It is a computer that is connected to a network. It is also called a host computer.

# what is port?

# The port is a communication endpoint. It is a communication endpoint. It is also called a port number.

# what is flask run debug?

# The flask run debug is an option that is used to specify the debug mode that the Flask application will run on. It is an option that is used to specify the debug mode that the Flask application will run on. It is also called the flask run debug option.

# what is flask run extra-files?

# The flask run extra-files is an option that is used to specify the extra files that the Flask application will run on. It is an option that is used to specify the extra files that the Flask application will run on. It is also called the flask run extra-files option.

# what is flask_marshmallow ?

# Flask-Marshmallow is an extension for Flask that adds support for serializing and deserializing complex data structures into and from native Python datatypes. It is an extension for Flask that adds support for serializing and deserializing complex data structures into and from native Python datatypes.

# what is marshmallow?

# Marshmallow is a Python library for serializing and deserializing complex data structures into and from native Python datatypes. It is a Python library for serializing and deserializing complex data structures into and from native Python datatypes.

# what is marshmallow schema?

# Marshmallow schema is a class that is used to define the structure of the data that is to be serialized or deserialized. It is a class that is used to define the structure of the data that is to be serialized or deserialized. It is also called a marshmallow schema class.

# what is marshmallow fields?

# Marshmallow fields is a class that is used to define the fields of the data that is to be serialized or deserialized. It is a class that is used to define the fields of the data that is to be serialized or deserialized. It is also called a marshmallow fields class.

# what is difference between marshmallow and flask_marshmallow?

# Marshmallow is a Python library for serializing and deserializing complex data structures into and from native Python datatypes. Flask-Marshmallow is an extension for Flask that adds support for serializing and deserializing complex data structures into and from native Python datatypes.

# what is marshmallow validate?

# Marshmallow validate is a function that is used to validate the data that is to be serialized or deserialized. It is a function that is used to validate the data that is to be serialized or deserialized. It is also called a marshmallow validate function.

# Multiple keys can be marked as primary keys in which case they become a compound primary key.

# what is flask_sqlalchemy?

# Flask-SQLAlchemy is an extension for Flask that adds support for SQLAlchemy to your application. It is an extension for Flask that adds support for SQLAlchemy to your application. It is also called flask_sqlalchemy extension.

# what is sqlalchemy?

# SQLAlchemy is a Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL. It is a Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL.

# what is sqlalchemy model?

# SQLAlchemy model is a class that is used to define the structure of the data that is to be stored in the database. It is a class that is used to define the structure of the data that is to be stored in the database. It is also called a sqlalchemy model class.

# what is sqlalchemy column?

# SQLAlchemy column is a class that is used to define the columns of the data that is to be stored in the database. It is a class that is used to define the columns of the data that is to be stored in the database. It is also called a sqlalchemy column class.

# what is sqlalchemy relationship?

# SQLAlchemy relationship is a class that is used to define the relationship between the data that is to be stored in the database. It is a class that is used to define the relationship between the data that is to be stored in the database. It is also called a sqlalchemy relationship class.

# what is sqlalchemy session?

# SQLAlchemy session is a class that is used to define the session of the data that is to be stored in the database. It is a class that is used to define the session of the data that is to be stored in the database. It is also called a sqlalchemy session class.

# what is sqlalchemy query?

# SQLAlchemy query is a class that is used to define the query of the data that is to be stored in the database. It is a class that is used to define the query of the data that is to be stored in the database. It is also called a sqlalchemy query class.

# what is sqlalchemy engine?

# SQLAlchemy engine is a class that is used to define the engine of the data that is to be stored in the database. It is a class that is used to define the engine of the data that is to be stored in the database. It is also called a sqlalchemy engine class.

# what is sqlalchemy metadata?

# SQLAlchemy metadata is a class that is used to define the metadata of the data that is to be stored in the database. It is a class that is used to define the metadata of the data that is to be stored in the database. It is also called a sqlalchemy metadata class.

# what does metadata describe about a table?

# Metadata describes about a table. It describes about a table. It is also called a table metadata.

# what is pickleType?

# PickleType is a class that is used to define the type of the data that is to be stored in the database. It is a class that is used to define the type of the data that is to be stored in the database. It is also called a pickleType class.
#
# basically it is used to store python objects in the database.


# what is relationship function?

# Relationship function is a function that is used to define the relationship between the data that is to be stored in the database. It is a function that is used to define the relationship between the data that is to be stored in the database. It is also called a relationship function.
#
# the lazy parameter is used to specify the loading strategy for the relationship. It is used to specify the loading strategy for the relationship. It is also called a lazy parameter.

# if lazy is set to dynamic, the relationship will return a query object that can be used to load related objects.
# if lazy is set to select, the relationship will load related objects in a single database query.
# if lazy is set to joined, the relationship will load related objects in a single database query and join the results to the parent object.
# if lazy is set to subquery, the relationship will load related objects in a single database query and join the results to the parent object.
# if lazy is set to noload, the relationship will not load related objects.
# if lazy is set to raiseload, the relationship will raise an error if the related objects are not already loaded.
# if lazy is set to immediate, the relationship will load related objects in a single database query and join the results to the parent object.


# if lazy is set to true, the relationship will load related objects in a single database query and join the results to the parent object. here true is an alias for joined. the parent object is the object that is being queried. the related objects are the objects that are being queried for.


# what is backref?

# Backref is a function that is used to define the backref of the data that is to be stored in the database. It is a function that is used to define the backref of the data that is to be stored in the database. It is also called a backref function.

# what is uselist?

# if uselist is set to false we establish one to one relationship, else we establish one to many relationship. default value is set to true. it is a parameter that is used to define the uselist of the data that is to be stored in the database. it is also called a uselist parameter.

# what is back_populates?

# back_populates is a parameter that is used to define the back_populates of the data that is to be stored in the database. it is also called a back_populates parameter.

# You can then also use my_address.person to get to the person at that address. This is called a bidirectional relationship. It is a relationship that is used to define the relationship between the data that is to be stored in the database. It is also called a back_populates relationship.

# in many to many relationship

# If you want to use many-to-many relationships you will need to define a helper table that is used for the relationship. For this helper table it is strongly recommended to not use a model but an actual table.
